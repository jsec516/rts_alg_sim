{"version":3,"sources":["components/form.js","components/simulateForm.js","components/task-input.js","components/step.js","components/task-list.js","components/result.js","components/chart/edf.js","components/chart/lst.js","components/chart/rms.js","algorithms/edf.js","algorithms/lst.js","algorithms/rms.js","App.js","serviceWorker.js","index.js"],"names":["options","key","text","value","InputForm","handler","Form","Field","Select","placeholder","onChange","Input","TaskInput","props","handleChange","e","name","setState","handleSubmit","state","taskId","exec","deadline","simulationtime","this","onSubmit","Group","widths","type","id","fluid","Button","primary","React","Component","Step","title","content","Card","centered","Content","Header","Description","TaskList","tasks","Table","celled","Row","HeaderCell","Body","map","item","index","Cell","href","onClick","resultMapper","edf","payload","style","overflow","className","data","console","log","backgroundColor","color","toString","axis","lst","rms","Result","algorithm","ResultPanel","getRandomColor","i","Math","floor","random","taskMapper","input","simulationTime","resultUpdater","task_info_edf","Number","period","collector","collectormissed","collectorcomplete","SIMULATION_TIME","task_id","wcet","arrival_time","slack_time","ceu","pre_emption_count","deadline_misses","completion_count","cumulative_response_time","sort","x","y","current_process_time","current_process","last_process","length","push","task_info_lst","window","alert","task_info_rms","App","handleRemoveTask","preventDefault","results","filter","currentIndex","updateSimulationTime","simulation_time","updateResult","result","handleTaskRequest","bind","runSimulation","updateAlg","selectedAlg","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0575d25d.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form } from 'semantic-ui-react'\nconst options = [\n    { key: 'edf', text: 'Earliest Deadline First', value: 'edf' },\n    { key: 'rms', text: 'Rate-Monotonic Scheduling', value: 'rms' },\n    { key: 'lst', text: 'Least Slack Time', value: 'lst' },\n];\n\nconst InputForm = ({handler}) => (\n    <Form>\n        <Form.Field>\n            <Form.Select\n                options={options}\n                placeholder='Select'\n                onChange={handler}\n            />\n        </Form.Field>\n    </Form>\n  )\n  \n  export default InputForm\n  ","import React from 'react';\nimport { Form } from 'semantic-ui-react'\n\nconst InputForm = ({handler}) => (\n    <Form>\n        <Form.Field>\n            <Form.Input\n                placeholder='Simulation Time'\n                onChange={handler}\n            />\n        </Form.Field>\n    </Form>\n  )\n  \n  export default InputForm\n  ","import React from 'react';\nimport { Button, Form } from 'semantic-ui-react'\n\nclass TaskInput extends React.Component {\nconstructor(props) {\n    super(props);\n    this.state = {\n        taskId: null,\n        exec: null,\n        deadline: null, \n        simulationtime: null\n    }\n}\n\n\nhandleChange = (e, { name, value }) => this.setState({ [name]: value })\n\nhandleSubmit = () => {\n    this.props.handler([this.state.taskId, this.state.exec, this.state.deadline]);\n    // this.setState({\n    //     taskId: null,\n    //     exec: null,\n    //     deadline: null\n    // })\n}\n\n\nrender() {\n    const {taskId, exec, deadline} = this.state;\n    return (\n        \n        <Form onSubmit={this.handleSubmit}>\n            \n            <Form.Group widths='equal'>\n            <Form.Input type=\"number\" id=\"period\" fluid placeholder='Task ID' name='taskId'\n            value={taskId}\n            onChange={this.handleChange}/>\n            <Form.Input type=\"number\" fluid placeholder='Deadline' name='exec'\n            value={exec}\n            onChange={this.handleChange}/>\n            <Form.Input type=\"number\" fluid placeholder='Execution Time' name='deadline'\n            value={deadline}\n            onChange={this.handleChange}/>\n            </Form.Group>\n        \n            <Button primary>Add to task-list</Button>\n        </Form>\n    )\n}\n}\n\nexport default TaskInput\n\n","import React from 'react';\nimport { Card } from 'semantic-ui-react'\n\nconst Step = ({title, content, ...props}) => (\n    <Card centered {...props}>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Description>\n          {content}\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  )\n  \n  export default Step\n  ","import React from 'react';\nimport { Table, Label } from 'semantic-ui-react'\n\nconst TaskList = ({tasks, handler}) => (\n    <Table celled>\n        <Table.Header>\n        <Table.Row>\n            <Table.HeaderCell>Task ID</Table.HeaderCell>\n            <Table.HeaderCell>Deadline</Table.HeaderCell>\n            <Table.HeaderCell>Execution Time</Table.HeaderCell>\n            <Table.HeaderCell>Action</Table.HeaderCell>\n        </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n            {tasks.map((item, index) => (\n                <Table.Row key={index}>\n                    <Table.Cell>{item[0]}</Table.Cell>\n                    <Table.Cell>{item[1]}</Table.Cell>\n                    <Table.Cell>{item[2]}</Table.Cell>\n                    <Table.Cell><a href=\"\" onClick={(e) => handler(e, index)}>Remove</a></Table.Cell>\n                </Table.Row>\n            ))}\n        </Table.Body>\n    </Table>\n)\n  \nexport default TaskList\n  \n","import React from 'react';\nimport { Button, Form } from 'semantic-ui-react'\nimport edf from './chart/edf';\nimport lst from './chart/lst';\nimport rms from './chart/rms';\n\nconst resultMapper = {\n    edf: edf,\n    lst: lst,\n    rms: rms\n}\n\nconst Result = ({payload, algorithm}) => {\n    const ResultPanel = resultMapper[algorithm];\n    if(!ResultPanel) {\n        return null;\n    }\n    return (\n        <ResultPanel payload={payload} />\n    );\n  }\n  \n  export default Result\n  ","import React from 'react';\nexport default ({payload}) => {\n    return (\n        <div style={{overflow: \"auto\"}}>\n           <table className=\"ui table\">\n               <tbody>\n                    <tr>\n                        {payload.data.map((item, index) => {\n                            console.log(item);\n                            return (<td style={{backgroundColor: item.color}} key={index}>{item.text.toString()}</td>)\n                        })}\n                    </tr>\n                    <tr>\n                        {payload.axis.map((item, index) => (\n                            <td key={index}>{item}</td>\n                        ))}\n                    </tr>\n                </tbody>\n            </table> \n        </div>\n    );\n}","import React from 'react';\nexport default ({payload}) => {\n    return (\n        <div style={{overflow: \"auto\"}}>\n           <table className=\"ui table\">\n               <tbody>\n                    <tr>\n                        {payload.data.map((item, index) => {\n                            console.log(item);\n                            return (<td style={{backgroundColor: item.color}} key={index}>{item.text.toString()}</td>)\n                        })}\n                    </tr>\n                    <tr>\n                        {payload.axis.map((item, index) => (\n                            <td key={index}>{item}</td>\n                        ))}\n                    </tr>\n                </tbody>\n            </table> \n        </div>\n    );\n}\n","import React from 'react';\nexport default ({payload}) => {\n    return (\n        <div style={{overflow: \"auto\"}}>\n           <table className=\"ui table\">\n               <tbody>\n                    <tr>\n                        {payload.data.map((item, index) => {\n                            console.log(item);\n                            return (<td style={{backgroundColor: item.color}} key={index}>{item.text.toString()}</td>)\n                        })}\n                    </tr>\n                    <tr>\n                        {payload.axis.map((item, index) => (\n                            <td key={index}>{item}</td>\n                        ))}\n                    </tr>\n                </tbody>\n            </table> \n        </div>\n    );\n}\n","\nconst preprocess = (raw_tasks) => {\nreturn raw_tasks.map(item => {\n\tlet task_id = item.id;\n\tlet period = item.exec;\n\tlet wcet = item.period;\n\tlet arrival_time = 0.0\n\tlet deadline = arrival_time + period\n\tlet ceu = 0.0\n\tlet slack_time = (deadline - 0.0) - (wcet - ceu)\n\tlet pre_emption_count = 0\n\tlet deadline_misses = 0\n\tlet completion_count = 0\n\tlet cumulative_response_time = 0.0\n\tlet temp_list = {task_id, period, wcet, arrival_time, deadline, slack_time, ceu, pre_emption_count, deadline_misses, completion_count, cumulative_response_time, color: item.color};\n\treturn temp_list;\n})\n\n}\n\nfunction getRandomColor() {\nvar letters = '0123456789ABCDEF';\nvar color = '#';\nfor (var i = 0; i < 6; i++) {\n\tcolor += letters[Math.floor(Math.random() * 16)];\n}\nreturn color;\n}\n\nexport default function edf(input, simulationTime, resultUpdater) {\n\n\t/* const input = [\n\t\t[1, 10, 4],\n\t\t[2, 7, 1],\n\t\t[3, 9, 5]\n\t]; */\n\tconst task_info_edf = input.map(item => ({\n\t\tid: new Number(item[0]),\n\t\texec: new Number(item[1]),\n\t\tperiod: new Number(item[2]),\n\t\tcolor: getRandomColor()\n\t}))\n\tlet collector = {\n\t\taxis: [],\n\t\tdata: []\n\t};\n\tlet collectormissed = {\n\t\taxis: [],\n\t\tdata: []\n\t};\n\tlet collectorcomplete = {\n\t\taxis: [],\n\t\tdata: []\n\t};\n\tconst SIMULATION_TIME = new Number(simulationTime);\n\tconsole.log(task_info_edf);\n\n\tlet tasks = preprocess(task_info_edf);\n\ttasks.sort(function (x, y) {\n\t\treturn x.deadline - y.deadline;\n\t}); //sort on deadline\n\tlet current_process_time = 0;\n\tlet current_process = 0;\n\tlet last_process = 0;\n\n\twhile (current_process_time <= SIMULATION_TIME) {\n\t\tconsole.log(\"At Time : \" + current_process_time.toString());\n\t\tcurrent_process = -1;\n\n\t\tfor (let i = 0; i < tasks.length; i++) {\n\t\t\tif (tasks[i].arrival_time <= current_process_time) {\n\t\t\t\tcurrent_process = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tif ((current_process != last_process) && tasks[last_process] && tasks[last_process].ceu > 0) {\n\t\t\tconsole.log(\"    PRE-EMPTING TASK \" + tasks[last_process].task_id.toString());\n\t\t\ttasks[last_process].pre_emption_count = tasks[last_process].pre_emption_count + 1;\n\t\t}\n\t\n\t\tcollector.axis.push(current_process_time);\n\t\tif(tasks[current_process]) {\n\t\t\tconsole.log(\"EXECUTING TASK \" + tasks[current_process].task_id.toString());\n\t\t\tcollector.data.push({color: tasks[current_process].color, text: tasks[current_process].task_id});\n\t\t} else {\n\t\t\tconsole.log(\"IDLE TIME \");\n\t\t\tcollector.data.push({color: \"#fff\", text: \"NA\"});\n\t\t}\n\t\t\n\t\t// if (tasks[current_process][0] == 2) {\n\t\t// \tchangeTable('blue');\n\t\t// \tappendColumn();\t\n\t\t// }\n\t\t// if (tasks[current_process][0] == 1) {\n\t\t// \tchangeTable('green');\n\t\t// \tappendColumn();\n\t\t// }\n\t\t// if (tasks[current_process][0] == 3) {\n\t\t// \tchangeTable('yellow');\n\t\t// \tappendColumn();\n\t\t// }\n\n\t\tif (current_process > -1) {\n\t\t\ttasks[current_process].ceu = tasks[current_process].ceu + 1.0;\n\n\t\t\tif (tasks[current_process].ceu == tasks[current_process].wcet) {\n\n\t\t\t\tconsole.log(\"    TASK COMPLETED \" + tasks[current_process].task_id.toString());\n\t\t\t\tcollectorcomplete.axis.push(current_process_time);\n\t\t\t\tcollectorcomplete.data.push({color: tasks[current_process].color, text: tasks[current_process].task_id});\n\t\t\t\ttasks[current_process].completion_count += 1;\n\t\t\t\ttasks[current_process].cumulative_response_time += current_process_time + 1.0 - tasks[current_process].arrival_time;\n\t\t\t\ttasks[current_process].arrival_time += tasks[current_process].period;\n\t\t\t\ttasks[current_process].deadline = tasks[current_process].arrival_time + tasks[current_process].period;\n\t\t\t\ttasks[current_process].ceu = 0.0;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < tasks.length; i++) {\n\t\t\tif (tasks[i].deadline < current_process_time) {\n\t\t\t\tconsole.log(\"    TASK \" + tasks[i].task_id.toString() + \" MISSED DEADLINE!!\");\n\t\t\t\tcollectormissed.axis.push(current_process_time);\n\t\t\t\tcollectormissed.data.push({color: tasks[i].color, text: tasks[i].task_id});\n\t\t\t\ttasks[i].deadline_misses = tasks[i].deadline_misses + 1;\n\t\t\t\ttasks[i].arrival_time += tasks[i].period;\n\t\t\t\ttasks[i].deadline = tasks[i].arrival_time + tasks[i].period;\n\t\t\t\ttasks[i].ceu = 0.0;\n\t\t\t}\n\t\t}\n\n\t\tcurrent_process_time += 1.0;\n\t\tlast_process = current_process;\n\t\ttasks.sort(function (x, y) {\n\t\t\treturn x.deadline - y.deadline; //sort on deadline\n\t\t});\n\t}\n\tresultUpdater({\n\t\tcollector,\n\t\tcollectormissed,\n\t\tcollectorcomplete});\n}\n","const preprocess = (raw_tasks) => {\n\treturn raw_tasks.map(item => {\n\t\tlet task_id = item.id;\n\t\tlet period = item.exec;\n\t\tlet wcet = item.period;\n\t\tlet arrival_time = 0.0\n\t\tlet deadline = arrival_time + period\n\t\tlet ceu = 0.0\n\t\tlet slack_time = (deadline - 0.0) - (wcet - ceu)\n\t\tlet pre_emption_count = 0\n\t\tlet deadline_misses = 0\n\t\tlet completion_count = 0\n\t\tlet cumulative_response_time = 0.0\n\t\tlet temp_list = {task_id, period, wcet, arrival_time, deadline, slack_time, ceu, pre_emption_count, deadline_misses, completion_count, cumulative_response_time, color: item.color};\n\t\treturn temp_list;\n\t})\n\t\n}\n\nfunction getRandomColor() {\n\tvar letters = '0123456789ABCDEF';\n\tvar color = '#';\n\tfor (var i = 0; i < 6; i++) {\n\t  color += letters[Math.floor(Math.random() * 16)];\n\t}\n\treturn color;\n  }\n\nexport default function lst(input, simulationTime, resultUpdater) {\n\ttry{\n\t/* const input = [\n\t\t[1, 10, 4],\n\t\t[2, 7, 1],\n\t\t[3, 9, 5]\n\t]; */\n\tconst task_info_lst = input.map(item => ({\n\t\tid: new Number(item[0]),\n\t\texec: new Number(item[1]),\n\t\tperiod: new Number(item[2]),\n\t\tcolor: getRandomColor()\n\t}))\n\tlet collector = {\n\t\taxis: [],\n\t\tdata: []\n\t};\n\tlet collectormissed = {\n\t\taxis: [],\n\t\tdata: []\n\t};\n\tlet collectorcomplete = {\n\t\taxis: [],\n\t\tdata: []\n\t};\n\tconst SIMULATION_TIME = new Number(simulationTime);\n\tconsole.log(task_info_lst);\n\n\tlet tasks = preprocess(task_info_lst);\n\ttasks.sort(function (x, y) {\n\t\treturn x.slack_time - y.slack_time; //Sort on Slack time\n\t}); //sort on deadline\n\tlet current_process_time = 0;\n\tlet current_process = 0;\n\tlet last_process = 0;\n\n\twhile (current_process_time <= SIMULATION_TIME) {\n\t\tconsole.log(\"At Time : \" + current_process_time.toString());\n\t\tcurrent_process = -1;\n\n\t\tfor (let i = 0; i < tasks.length; i++) {\n\t\t\tif (tasks[i].arrival_time <= current_process_time) {\n\t\t\t\tcurrent_process = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\n\t\tif ((current_process != last_process) && tasks[last_process] && tasks[last_process].ceu > 0) {\n\t\t\tconsole.log(\"    PRE-EMPTING TASK \" + tasks[last_process].task_id.toString());\n\t\t\ttasks[last_process].pre_emption_count = tasks[last_process].pre_emption_count + 1;\n\t\t}\n\t\t\n\t\tcollector.axis.push(current_process_time);\n\t\tif(tasks[current_process]) {\n\t\t\tconsole.log(\"EXECUTING TASK \" + tasks[current_process].task_id.toString());\n\t\t\tcollector.data.push({color: tasks[current_process].color, text: tasks[current_process].task_id});\n\t\t} else {\n\t\t\tconsole.log(\"IDLE TIME \");\n\t\t\tcollector.data.push({color: \"#fff\", text: \"NA\"});\n\t\t}\n\t\t\n\t\t// if (tasks[current_process][0] == 2) {\n\t\t// \tchangeTable('blue');\n\t\t// \tappendColumn();\t\n\t\t// }\n\t\t// if (tasks[current_process][0] == 1) {\n\t\t// \tchangeTable('green');\n\t\t// \tappendColumn();\n\t\t// }\n\t\t// if (tasks[current_process][0] == 3) {\n\t\t// \tchangeTable('yellow');\n\t\t// \tappendColumn();\n\t\t// }\n\n\t\tif (current_process > -1) {\n\t\t\ttasks[current_process].ceu = tasks[current_process].ceu + 1.0;\n\n\t\t\tif (tasks[current_process].ceu == tasks[current_process].wcet) {\n\n\t\t\t\tconsole.log(\"    TASK COMPLETED \" + tasks[current_process].task_id.toString());\n\t\t\t\tcollectorcomplete.axis.push(current_process_time);\n\t\t\t\tcollectorcomplete.data.push({color: tasks[current_process].color, text: tasks[current_process].task_id});\n\t\t\t\ttasks[current_process].completion_count += 1;\n\t\t\t\ttasks[current_process].cumulative_response_time += current_process_time + 1.0 - tasks[current_process].arrival_time;\n\t\t\t\ttasks[current_process].arrival_time += tasks[current_process].period;\n\t\t\t\ttasks[current_process].deadline = tasks[current_process].arrival_time + tasks[current_process].period;\n\t\t\t\ttasks[current_process].ceu = 0.0;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < tasks.length; i++) {\n\t\t\tif (tasks[i].deadline < current_process_time) {\n\t\t\t\tconsole.log(\"    TASK \" + tasks[i].task_id.toString() + \" MISSED DEADLINE!!\");\n\t\t\t\tcollectormissed.axis.push(current_process_time);\n\t\t\t\tcollectormissed.data.push({color: tasks[i].color, text: tasks[i].task_id});\n\t\t\t\ttasks[i].deadline_misses = tasks[i].deadline_misses + 1;\n\t\t\t\ttasks[i].arrival_time += tasks[i].period;\n\t\t\t\ttasks[i].deadline = tasks[i].arrival_time + tasks[i].period;\n\t\t\t\ttasks[i].ceu = 0.0;\n\t\t\t}\n\t\t}\n\n\t\tcurrent_process_time += 1.0;\n\t\tlast_process = current_process;\n\t\ttasks.sort(function (x, y) {\n\t\t\treturn x.slack_time - y.slack_time; //sort on slack time\n\t\t});\n\t}\n\tresultUpdater({\n\t\tcollector,\n\t\tcollectormissed,\n\t\tcollectorcomplete});\n}\ncatch{\n\twindow.alert(\"Deadline yet to be finished while no task left to be executed!\")\n}}\n","const preprocess = (raw_tasks) => {\n\treturn raw_tasks.map(item => {\n\t\tlet task_id = item.id;\n\t\tlet period = item.exec;\n\t\tlet wcet = item.period;\n\t\tlet arrival_time = 0.0\n\t\tlet deadline = arrival_time + period\n\t\tlet ceu = 0.0\n\t\tlet slack_time = (deadline - 0.0) - (wcet - ceu)\n\t\tlet pre_emption_count = 0\n\t\tlet deadline_misses = 0\n\t\tlet completion_count = 0\n\t\tlet cumulative_response_time = 0.0\n\t\tlet temp_list = {task_id, period, wcet, arrival_time, deadline, slack_time, ceu, pre_emption_count, deadline_misses, completion_count, cumulative_response_time, color: item.color};\n\t\treturn temp_list;\n\t})\n\t\n}\n\nfunction getRandomColor() {\n\tvar letters = '0123456789ABCDEF';\n\tvar color = '#';\n\tfor (var i = 0; i < 6; i++) {\n\t  color += letters[Math.floor(Math.random() * 16)];\n\t}\n\treturn color;\n  }\n\nexport default function rms(input, simulationTime, resultUpdater) {\n\ttry{\n\t/* const input = [\n\t\t[1, 10, 4],\n\t\t[2, 7, 1],\n\t\t[3, 9, 5]\n\t]; */\n\tconst task_info_rms = input.map(item => ({\n\t\tid: new Number(item[0]),\n\t\texec: new Number(item[1]),\n\t\tperiod: new Number(item[2]),\n\t\tcolor: getRandomColor()\n\t}))\n\tlet collector = {\n\t\taxis: [],\n\t\tdata: []\n\t};\n\tlet collectormissed = {\n\t\taxis: [],\n\t\tdata: []\n\t};\n\tlet collectorcomplete = {\n\t\taxis: [],\n\t\tdata: []\n\t};\n\tconst SIMULATION_TIME = new Number(simulationTime);\n\tconsole.log(task_info_rms);\n\n\tlet tasks = preprocess(task_info_rms);\n\ttasks.sort(function (x, y) {\n\t\treturn x.period - y.period; //Sort on Period\n\t}); //sort on deadline\n\tlet current_process_time = 0;\n\tlet current_process = 0;\n\tlet last_process = 0;\n\n\twhile (current_process_time <= SIMULATION_TIME) {\n\t\tconsole.log(\"At Time : \" + current_process_time.toString());\n\t\tcurrent_process = -1;\n\n\t\tfor (let i = 0; i < tasks.length; i++) {\n\t\t\tif (tasks[i].arrival_time <= current_process_time) {\n\t\t\t\tcurrent_process = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t//added for sanity check\n\t\tif ((current_process != last_process) && tasks[last_process] && tasks[last_process].ceu > 0) {\n\t\t\tconsole.log(\"    PRE-EMPTING TASK \" + tasks[last_process].task_id.toString());\n\t\t\ttasks[last_process].pre_emption_count = tasks[last_process].pre_emption_count + 1;\n\t\t}\n\t\tcollector.axis.push(current_process_time);\n\t\tif(tasks[current_process]) {\n\t\t\tconsole.log(\"EXECUTING TASK \" + tasks[current_process].task_id.toString());\n\t\t\tcollector.data.push({color: tasks[current_process].color, text: tasks[current_process].task_id});\n\t\t} else {\n\t\t\tconsole.log(\"IDLE TIME \");\n\t\t\tcollector.data.push({color: \"#fff\", text: \"NA\"});\n\t\t}\n\t\t\n\t\t// if (tasks[current_process][0] == 2) {\n\t\t// \tchangeTable('blue');\n\t\t// \tappendColumn();\t\n\t\t// }\n\t\t// if (tasks[current_process][0] == 1) {\n\t\t// \tchangeTable('green');\n\t\t// \tappendColumn();\n\t\t// }\n\t\t// if (tasks[current_process][0] == 3) {\n\t\t// \tchangeTable('yellow');\n\t\t// \tappendColumn();\n\t\t// }\n\n\t\tif (current_process > -1) {\n\t\t\ttasks[current_process].ceu = tasks[current_process].ceu + 1.0;\n\n\t\t\tif (tasks[current_process].ceu == tasks[current_process].wcet) {\n\n\t\t\t\tconsole.log(\"    TASK COMPLETED \" + tasks[current_process].task_id.toString());\n\t\t\t\tcollectorcomplete.axis.push(current_process_time);\n\t\t\t\tcollectorcomplete.data.push({color: tasks[current_process].color, text: tasks[current_process].task_id});\n\t\t\t\ttasks[current_process].completion_count += 1;\n\t\t\t\ttasks[current_process].cumulative_response_time += current_process_time + 1.0 - tasks[current_process].arrival_time;\n\t\t\t\ttasks[current_process].arrival_time += tasks[current_process].period;\n\t\t\t\ttasks[current_process].deadline = tasks[current_process].arrival_time + tasks[current_process].period;\n\t\t\t\ttasks[current_process].ceu = 0.0;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < tasks.length; i++) {\n\t\t\tif (tasks[i].deadline < current_process_time) {\n\t\t\t\tconsole.log(\"    TASK \" + tasks[i].task_id.toString() + \" MISSED DEADLINE!!\");\n\t\t\t\tcollectormissed.axis.push(current_process_time);\n\t\t\t\tcollectormissed.data.push({color: tasks[i].color, text: tasks[i].task_id});\n\t\t\t\ttasks[i].deadline_misses = tasks[i].deadline_misses + 1;\n\t\t\t\ttasks[i].arrival_time += tasks[i].period;\n\t\t\t\ttasks[i].deadline = tasks[i].arrival_time + tasks[i].period;\n\t\t\t\ttasks[i].ceu = 0.0;\n\t\t\t}\n\t\t}\n\n\t\tcurrent_process_time += 1.0;\n\t\tlast_process = current_process;\n\t\ttasks.sort(function (x, y) {\n\t\t\treturn x.period - y.period; //sort on period\n\t\t});\n\t\t}\n\t\tresultUpdater({\n\t\t\tcollector,\n\t\t\tcollectormissed,\n\t\t\tcollectorcomplete});\n}catch{\n\twindow.alert(\"Deadline yet to be finished while no task left to be executed!\")\n}}\n\n","import React from 'react';\nimport InputForm from './components/form';\nimport SimulateForm from './components/simulateForm';\nimport TaskInput from './components/task-input';\nimport Step from './components/step';\nimport './App.css';\nimport TaskList from './components/task-list';\nimport Result from './components/result';\nimport { Button } from 'semantic-ui-react';\nimport edf from './algorithms/edf';\nimport lst from './algorithms/lst';\nimport rms from './algorithms/rms';\nimport filter from 'lodash/filter';\n\nconst taskMapper = {\n  'edf': edf,\n  'lst': lst,\n  'rms': rms,\n}\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      algorithm: null,\n      simulation_time: 0,\n      tasks: [],\n      result: {\n        collector:{data: [],\n        axis: []},\n        collectormissed:{data: [],\n          axis: []},\n          collectorcomplete:{data: [],\n            axis: []}\n      },\n      /*resultmissed: {\n        datamissed: [],\n        axismissed: []\n      }*/\n    };\n    this.handleTaskRequest = this.handleTaskRequest.bind(this);\n    this.runSimulation = this.runSimulation.bind(this);\n    this.updateAlg = this.updateAlg.bind(this);\n  }\n\n  handleTaskRequest(item) {\n    console.log(item);\n    this.setState({tasks: [...this.state.tasks, item]});\n  }\n\n  handleRemoveTask = (e, index) => {\n    e.preventDefault();\n    console.log(index);\n    const results = filter(this.state.tasks, (item, currentIndex) => currentIndex !== index);\n    this.setState({tasks: results});\n  }\n\n  updateAlg(e, item) {\n    this.setState({algorithm: item.value});\n  }\n\n  updateSimulationTime = (e, item) => {\n    this.setState({simulation_time: item.value});\n  }\n\n  updateResult = (result) => {\n    this.setState({result});\n  }\n  /*updateResultMissed = (resultmissed) => {\n    this.setState({resultmissed});\n  }*/\n\n  runSimulation(e) {\n    e.preventDefault();\n    const selectedAlg = taskMapper[this.state.algorithm];\n    if(selectedAlg) {\n      selectedAlg(this.state.tasks, this.state.simulation_time, this.updateResult);\n      //selectedAlg(this.state.tasks, this.updateResultMissed);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"ui middle aligned center aligned grid container\">\n        <div className=\"column \">\n          <div className=\"steps\"><Step title=\"which algorithm you want to simulate\" content={<InputForm handler={this.updateAlg}/>} /></div>\n          <div className=\"steps\"><Step title=\"simulation time\" content={<SimulateForm handler={this.updateSimulationTime}/>} /></div>\n          <div className=\"steps\"><Step fluid title=\"Add Task\" content={<TaskInput handler={this.handleTaskRequest} />} /></div>\n          <div className=\"steps\"><Step fluid title=\"Current Task List\" content={<TaskList tasks={this.state.tasks} handler={this.handleRemoveTask} />} /></div>\n          <div className=\"steps\"><Button primary onClick={this.runSimulation}>{this.state.algorithm ? `Simulate ${this.state.algorithm} Algorithm`: `Select an algorithm`}</Button></div>\n          <div className=\"result\"><Step fluid title=\"Simulation Result Executed Tasks\" content={<Result payload={this.state.result.collector} algorithm={this.state.algorithm}/>} /></div>\n          <div className=\"result\"><Step fluid title=\"Simulation Result Deadline Misses\" content={<Result payload={this.state.result.collectormissed} algorithm={this.state.algorithm}/>} /></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}